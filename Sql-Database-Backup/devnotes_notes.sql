-- MySQL dump 10.13  Distrib 8.0.27, for Win64 (x86_64)
--
-- Host: localhost    Database: devnotes
-- ------------------------------------------------------
-- Server version	8.0.27

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `notes`
--

DROP TABLE IF EXISTS `notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `notes` (
  `note_id` int NOT NULL AUTO_INCREMENT,
  `note_type_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `program_id` int DEFAULT NULL,
  `note_title` varchar(200) DEFAULT NULL,
  `content` longtext,
  `submission_date` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`note_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notes`
--

LOCK TABLES `notes` WRITE;
/*!40000 ALTER TABLE `notes` DISABLE KEYS */;
INSERT INTO `notes` VALUES (4,2,3,2,'cena','sdasd','04-01-2022 01:39 AM'),(5,1,3,4,'test','import React, { useState, useEffect } from \'react\'\nimport { Layout, Menu, Card, Input, Button} from \'antd\';\nimport {PlusOutlined }from \'@ant-design/icons\';\nimport { useHistory } from \"react-router-dom\";\nimport { notificationContent } from \"../Shared Files/notification\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \'../Styles/dashboard.css\';\nimport { getNotesType, getNotes, getAllNotes, deleteNote } from \'../Api/dashboard\';\nimport { Nav, NavDropdown } from \'react-bootstrap\';\nimport FormDetails from \"../Components/modal\";\n\nconst { Header, Content } = Layout;\nconst { Search } = Input;\n\nfunction ProjectDashBoard() {\n    let history = useHistory();\n    const [getNotesCategory, setNotesCategory] = useState([]);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(\'1\');\n    const [noteList, setNoteList] = useState([]);\n    const [allNotesList, setEntireNotesList] = useState([]);\n    const [editContent, setEditContent] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [userName, setUserName] = useState(\"\");\n    const [showIcon, setIcon] = useState(<i className=\"bi bi-file-earmark-code\"></i>);\n\n    const fetchData = async () => {\n        const params = {\n            user_id : localStorage.getItem(\'userID\'),\n            selectedTab : selectedTab,\n        }\n        setUserName(localStorage.getItem(\'userName\'))\n        const incomingNotesType = await getNotesType();\n        setNotesCategory(incomingNotesType.data);\n        const incomingNotes = await getNotes(params);\n        setNoteList(incomingNotes.data)\n        const incomingEntireNotes = await getAllNotes(params);\n        setEntireNotesList(incomingEntireNotes.data);\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    function setCardsIcon (key) {\n        switch (key) {\n            case \"1\" :\n                return setIcon(<i className=\"bi bi-file-earmark-code\"></i>);\n            case \"2\" : \n                return setIcon(<i className=\"bi bi-stack\"></i>);\n            case \"3\" : \n                return setIcon(<i className=\"bi bi-github\"></i>);\n            case \"4\" : \n                return setIcon(<i className=\"bi bi-cloud\"></i>);\n            case \"5\" : \n                return setIcon(<i className=\"bi bi-clipboard-check\"></i>);\n            case \"6\" : \n                return setIcon(<i className=\"bi bi-file-text\"></i>);\n        }\n    }\n\n    const handleTabSelection = async (key) => {\n        const params = {\n            user_id : localStorage.getItem(\'userID\'),\n            selectedTab : key,\n        }\n      setCardsIcon(key);\n      const incomingNotes = await getNotes(params);\n      setSelectedTab(key);\n      setNoteList(incomingNotes.data);\n    }\n\n    const showModal = (code, record) => {\n        if(code === \"create\") {\n            setIsModalVisible(true);\n        } \n        else if (code === \"edit\") {\n            setEditContent(record);\n            setIsModalVisible(true);\n        }\n      }\n\n      const onCancel = (status) => {\n        setIsModalVisible(status);\n        setEditContent([]);\n    }\n\n    const handleDelete = async (record) => {\n        const id = record.note_id;\n        await deleteNote(id).then(response => {\n            if(response.data == \"success\") return notificationContent(response.data, \"deleteConfirmation\");\n            else return notificationContent(response.data, \"deleteConfirmation\");\n        });\n        fetchData();\n    }\n\n    const searchHandler = (value) => {\n        setSearchTerm(value);\n        if(value !== \"\") {\n            const newList = allNotesList.filter(record => {\n                return Object.values(record).join(\" \").toLowerCase().includes(value.toLowerCase());\n            });\n            setSearchResult(newList);\n        } else {\n            setSearchResult(noteList);\n        }\n    }\n\n    const logoutHandler = () => {\n        localStorage.clear();\n        history.push(\'/\');\n    }\n\n    return (\n        <Layout className=\"dashboard-container\">\n            <Header style={{ position: \'fixed\', zIndex: 1, width: \'100%\' }}>\n                <div className=\'logo-frame\'>\n                <div className=\"user-logo\" style={{ color: \"white\" }}><span><i className=\"bi bi-person-circle\"></i></span>\n                <span className=\"user-name\">{userName}</span></div>\n                <div className=\'logout-outer\'><div className=\'logout-inner\' onClick={logoutHandler}>Logout</div></div>\n                </div>\n                {<Menu theme=\"dark\" color=\"red\" mode=\"horizontal\" defaultSelectedKeys={[selectedTab]}>\n                    {getNotesCategory.map((data) => (\n                         <Menu.Item key={data.notes_type_id} onClick={event => handleTabSelection(event.key)}>{data.notes_type}</Menu.Item>\n                    ))}\n                </Menu>}\n            </Header>\n            <Content className=\"site-layout\" style={{ padding: \'0 50px\', marginTop: 64 }}>\n                <div className=\"site-layout-background\" style={{ minHeight: 380 }}>\n                    <div className=\"search-container\">\n                    <Search placeholder=\"Search Your Notes here..\" className=\"search-bar\"\n                     enterButton={false} allowClear  onChange={event => searchHandler(event.target.value)} />\n                   <Button type=\"primary\" className=\"add-button\" onClick={event => showModal(\"create\")} icon={<PlusOutlined />} size={\"middle\"} />\n                    </div>\n                    <div className=\"slate-board\" >\n                    { searchTerm.length > 1 ? searchResult.map((record, index) => (\n                            <div className=\"cards-container\" key={index}>\n                                <Card key={index} className=\"cards\" onClick={event => showModal(\"edit\", record)}  bordered={false}>\n                                    <div><span>{showIcon}</span>\n                                    <span className=\"title-frame\"><p><b>{record.note_title}</b></p></span></div>\n                                    <div className=\"description-frame\"><p className=\"card-description\">{record.content}</p></div>\n                                </Card>\n                                <div className=\"delete-component\" onClick={event => handleDelete(record)}><i className=\"bi bi bi-trash\"></i></div>\n                                </div>\n                        )) : noteList.map((record, index) => (\n                            <div className=\"cards-container\" key={index}>\n                                <Card key={index} className=\"cards\" onClick={event => showModal(\"edit\", record)}  bordered={false}>\n                                    <div><span>{showIcon}</span>\n                                    <span className=\"title-frame\"><p><b>{record.note_title}</b></p></span></div>\n                                    <div className=\"description-frame\"><p className=\"card-description\">{record.content}</p></div>\n                                </Card>\n                                <div className=\"delete-component\" onClick={event => handleDelete(record)}><i className=\"bi bi bi-trash\"></i></div>\n                                </div>\n                        ))}\n                    </div>\n                </div>\n            </Content>\n            {isModalVisible && <FormDetails visiblity={isModalVisible} gridData={fetchData} edit={editContent} cancel={onCancel} />} \n            <a className=\"footer\" target=\'_blank\' href=\'http://www.linkedin.com/in/rajsriselvan\'><small>Created by Raj Sri Selvan</small></a>\n        </Layout>\n    )\n}\nexport default ProjectDashBoard;','04-01-2022 01:49 AM'),(6,1,3,5,'test 22','import React, { useState, useEffect } from \'react\'\nimport { Layout, Menu, Card, Input, Button} from \'antd\';\nimport {PlusOutlined }from \'@ant-design/icons\';\nimport { useHistory } from \"react-router-dom\";\nimport { notificationContent } from \"../Shared Files/notification\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \'../Styles/dashboard.css\';\nimport { getNotesType, getNotes, getAllNotes, deleteNote } from \'../Api/dashboard\';\nimport { Nav, NavDropdown } from \'react-bootstrap\';\nimport FormDetails from \"../Components/modal\";\n\nconst { Header, Content } = Layout;\nconst { Search } = Input;\n\nfunction ProjectDashBoard() {\n    let history = useHistory();\n    const [getNotesCategory, setNotesCategory] = useState([]);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(\'1\');\n    const [noteList, setNoteList] = useState([]);\n    const [allNotesList, setEntireNotesList] = useState([]);\n    const [editContent, setEditContent] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [userName, setUserName] = useState(\"\");\n    const [showIcon, setIcon] = useState(<i className=\"bi bi-file-earmark-code\"></i>);\n\n    const fetchData = async () => {\n        const params = {\n            user_id : localStorage.getItem(\'userID\'),\n            selectedTab : selectedTab,\n        }\n        setUserName(localStorage.getItem(\'userName\'))\n        const incomingNotesType = await getNotesType();\n        setNotesCategory(incomingNotesType.data);\n        const incomingNotes = await getNotes(params);\n        setNoteList(incomingNotes.data)\n        const incomingEntireNotes = await getAllNotes(params);\n        setEntireNotesList(incomingEntireNotes.data);\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    function setCardsIcon (key) {\n        switch (key) {\n            case \"1\" :\n                return setIcon(<i className=\"bi bi-file-earmark-code\"></i>);\n            case \"2\" : \n                return setIcon(<i className=\"bi bi-stack\"></i>);\n            case \"3\" : \n                return setIcon(<i className=\"bi bi-github\"></i>);\n            case \"4\" : \n                return setIcon(<i className=\"bi bi-cloud\"></i>);\n            case \"5\" : \n                return setIcon(<i className=\"bi bi-clipboard-check\"></i>);\n            case \"6\" : \n                return setIcon(<i className=\"bi bi-file-text\"></i>);\n        }\n    }\n\n    const handleTabSelection = async (key) => {\n        const params = {\n            user_id : localStorage.getItem(\'userID\'),\n            selectedTab : key,\n        }\n      setCardsIcon(key);\n      const incomingNotes = await getNotes(params);\n      setSelectedTab(key);\n      setNoteList(incomingNotes.data);\n    }\n\n    const showModal = (code, record) => {\n        if(code === \"create\") {\n            setIsModalVisible(true);\n        } \n        else if (code === \"edit\") {\n            setEditContent(record);\n            setIsModalVisible(true);\n        }\n      }\n\n      const onCancel = (status) => {\n        setIsModalVisible(status);\n        setEditContent([]);\n    }\n\n    const handleDelete = async (record) => {\n        const id = record.note_id;\n        await deleteNote(id).then(response => {\n            if(response.data == \"success\") return notificationContent(response.data, \"deleteConfirmation\");\n            else return notificationContent(response.data, \"deleteConfirmation\");\n        });\n        fetchData();\n    }\n\n    const searchHandler = (value) => {\n        setSearchTerm(value);\n        if(value !== \"\") {\n            const newList = allNotesList.filter(record => {\n                return Object.values(record).join(\" \").toLowerCase().includes(value.toLowerCase());\n            });\n            setSearchResult(newList);\n        } else {\n            setSearchResult(noteList);\n        }\n    }\n\n    const logoutHandler = () => {\n        localStorage.clear();\n        history.push(\'/\');\n    }\n\n    return (\n        <Layout className=\"dashboard-container\">\n            <Header style={{ position: \'fixed\', zIndex: 1, width: \'100%\' }}>\n                <div className=\'logo-frame\'>\n                <div className=\"user-logo\" style={{ color: \"white\" }}><span><i className=\"bi bi-person-circle\"></i></span>\n                <span className=\"user-name\">{userName}</span></div>\n                <div className=\'logout-outer\'><div className=\'logout-inner\' onClick={logoutHandler}>Logout</div></div>\n                </div>\n                {<Menu theme=\"dark\" color=\"red\" mode=\"horizontal\" defaultSelectedKeys={[selectedTab]}>\n                    {getNotesCategory.map((data) => (\n                         <Menu.Item key={data.notes_type_id} onClick={event => handleTabSelection(event.key)}>{data.notes_type}</Menu.Item>\n                    ))}\n                </Menu>}\n            </Header>\n            <Content className=\"site-layout\" style={{ padding: \'0 50px\', marginTop: 64 }}>\n                <div className=\"site-layout-background\" style={{ minHeight: 380 }}>\n                    <div className=\"search-container\">\n                    <Search placeholder=\"Search Your Notes here..\" className=\"search-bar\"\n                     enterButton={false} allowClear  onChange={event => searchHandler(event.target.value)} />\n                   <Button type=\"primary\" className=\"add-button\" onClick={event => showModal(\"create\")} icon={<PlusOutlined />} size={\"middle\"} />\n                    </div>\n                    <div className=\"slate-board\" >\n                    { searchTerm.length > 1 ? searchResult.map((record, index) => (\n                            <div className=\"cards-container\" key={index}>\n                                <Card key={index} className=\"cards\" onClick={event => showModal(\"edit\", record)}  bordered={false}>\n                                    <div><span>{showIcon}</span>\n                                    <span className=\"title-frame\"><p><b>{record.note_title}</b></p></span></div>\n                                    <div className=\"description-frame\"><p className=\"card-description\">{record.content}</p></div>\n                                </Card>\n                                <div className=\"delete-component\" onClick={event => handleDelete(record)}><i className=\"bi bi bi-trash\"></i></div>\n                                </div>\n                        )) : noteList.map((record, index) => (\n                            <div className=\"cards-container\" key={index}>\n                                <Card key={index} className=\"cards\" onClick={event => showModal(\"edit\", record)}  bordered={false}>\n                                    <div><span>{showIcon}</span>\n                                    <span className=\"title-frame\"><p><b>{record.note_title}</b></p></span></div>\n                                    <div className=\"description-frame\"><p className=\"card-description\">{record.content}</p></div>\n                                </Card>\n                                <div className=\"delete-component\" onClick={event => handleDelete(record)}><i className=\"bi bi bi-trash\"></i></div>\n                                </div>\n                        ))}\n                    </div>\n                </div>\n            </Content>\n            {isModalVisible && <FormDetails visiblity={isModalVisible} gridData={fetchData} edit={editContent} cancel={onCancel} />} \n            <a className=\"footer\" target=\'_blank\' href=\'http://www.linkedin.com/in/rajsriselvan\'><small>Created by Raj Sri Selvan</small></a>\n        </Layout>\n    )\n}\nexport default ProjectDashBoard;\n\n\n\nconst config = require(\"../db_config\");\nconst connection = config.connection;\n\nexports.getNotesType = (request, response) => {\n    connection.query(\"select * from notes_type\",\n        (error, result) => {\n            if (error) response.send(error);\n            else response.send(result);\n        })\n}\nexports.getLanguage = (request, response) => {\n    connection.query(\"select * from programming_language\",\n        (error, result) => {\n            if (error) response.send(error);\n            else response.send(result);\n        })\n}\nexports.createNotes = (request, response) => {\n    const data = request.body;\n    const incomingContent = JSON.stringify(data.content);\n    connection.query(`INSERT INTO notes (note_type_id, user_id, program_id, note_title, content, submission_date ) VALUES\n    (\"${data.note_type_id}\", \"${data.user_id}\", \"${data.program_id}\", \"${data.note_title}\", ${incomingContent}, \"${data.submission_date}\")`,\n        function (error, result) {\n            if (error) console.log(\"er---\", error)\n            else response.send(\"success\");\n        })\n}\nexports.getNotes = (request, response) => {\n    const data = request.query;\n    connection.query(`select * from notes where user_id = \"${data.user_id}\" and note_type_id = \"${data.selectedTab}\"`,\n        (error, result) => {\n            if (error) response.send(error);\n            else response.send(result);\n        })\n}\nexports.getAllNotes = (request, response) => {\n     const data = request.query;\n     connection.query(`select * from notes where user_id = \"${data.user_id}\"`,\n         (error, result) => {\n             if (error) response.send(error);\n             else response.send(result);\n         })\n }\nexports.deleteNote = (request, response) => {\n    const id = request.params.id;\n     connection.query(`delete from notes where note_id = \"${id}\"`,\n         (error, result) => {\n             if (error) response.send(error);\n             else response.send(\"success\");\n         })\n }\n exports.updateNotes = (request, response) => {\n    const data = request.body;\n    const incomingContent = JSON.stringify(data.content);\n    const id = JSON.parse(request.params.id)\n     connection.query(`update notes set note_title = \"${data.note_title}\", content = ${incomingContent}, user_id = \"${data.user_id}\",\n     note_type_id = \"${data.note_type_id}\", program_id = \"${data.program_id}\" where note_id = ${id}`,\n         (error, result) => {\n             if (error) response.send(error);\n             else response.send(\"success\");\n         })\n }\n\n\nimport React, { useState, useEffect } from \'react\'\nimport { Form, Input, Button, Modal, Select, Row, Col } from \'antd\';\nimport \"../Styles/modal.css\"\nimport { getNotesType, getProgramLanguage, createNotes, updateNote } from \"../Api/dashboard\";\nimport moment from \"moment\";\nimport { notificationContent } from \"../Shared Files/notification\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nfunction FormDetails(props) {\n    const [form] = Form.useForm();\n    const [editForm, setEditForm] = useState(false);\n    const [getCategory, setCategory] = useState([]);\n    const [getProgramType, setProgramType] = useState([]);\n    const [selectedTitle, setSelectedTitle] = useState([]);\n    const [selectedCategory, setSelectedCategory] = useState([]);\n    const [selectedProgram, setSelectedProgram] = useState(0);\n    const [selectedContent, setSelectedContent] = useState([]);\n    const [noteId, setNoteId] = useState([]);\n    const editValue = props.edit;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const incomingCategory = await getNotesType();\n                const incomingLanguage = await getProgramLanguage();\n                setCategory(incomingCategory.data);\n                setProgramType(incomingLanguage.data);\n            const checkEditValue = editValue.hasOwnProperty(\'note_id\');\n            if(checkEditValue) {\n                setSelectedTitle(editValue.note_title);\n                setSelectedCategory(editValue.note_type_id);\n                setSelectedProgram(editValue.program_id);\n                setSelectedContent(editValue.content);\n                setNoteId(editValue.note_id);\n                setEditForm(true);\n            }\n        }\n        fetchData();\n    }, []);\n\n    function onBlur() {\n        return\n    }\n\n    function onFocus() {\n        return\n    }\n\n    const handleCancel = () => {\n        form.resetFields();\n        clearFormValues();\n        setEditForm(false);\n        props.cancel(false);\n    }\n\n    const clearFormValues = () => {\n        setSelectedTitle([]);\n        setSelectedCategory([]);\n        setSelectedProgram([]);\n        setSelectedContent([]);\n    }\n\n    const handleOk = () => {\n        const currentDate = moment().format(\"DD-MM-YYYY hh:mm A\");\n        const payload = {\n            note_type_id: selectedCategory,\n            user_id: localStorage.getItem(\'userID\'),\n            program_id: selectedProgram,\n            note_title: selectedTitle,\n            content: selectedContent,\n            submission_date: currentDate\n        }\n        if(editForm) {\n            updateNote(noteId, payload).then(response => {\n                if (response.data === \"success\") {\n                    notificationContent(response.data, \"NoteSubmit\");\n                    form.resetFields();\n                    clearFormValues();\n                    props.cancel(false);\n                    setEditForm(false);\n                    props.gridData();\n                } \n                else return notificationContent(\"error\", \"NoteSubmit\");\n            })\n        } else {\n            createNotes(payload).then((response) => {\n                if (response.data === \"success\") {\n                    notificationContent(response.data, \"NoteSubmit\");\n                    form.resetFields();\n                    clearFormValues();\n                    props.cancel(false);\n                    props.gridData();\n                } \n                else return notificationContent(\"error\", \"NoteSubmit\");\n            });\n        }\n    }\n\n    return (\n            <Modal title={editForm ? \"Update Notes\" : \"Create Notes\"} className=\"popup-frame\" \n                width=\"49rem\"\n                okButtonProps={{ style: { display: \'none\' } }}\n                cancelButtonProps={{ style: { display: \'none\' } }}\n                closable={false}\n                footer={false}\n                visible={props.visiblity} >\n                <Form\n                    className=\"notes-form\"\n                    form={form}\n                    initialValues={{\n                        remember: true,\n                        Category : editValue.note_type_id,\n                        Language : editValue.program_id,\n                        Title: editValue.note_title,\n                        Content: editValue.content,\n                    }}\n                >\n                    <div className=\"inner-frame\" >\n                        <Row >\n                            <Col className=\"gutter-row\" span={10}>\n                                <Form.Item\n                                    name=\"Title\"\n                                    label=\"Title\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                        },\n                                    ]}\n                                >\n                                    <Input placeholder=\"Enter Title\" onChange={event => setSelectedTitle(event.target.value)} />\n                                </Form.Item>\n                            </Col>\n                            <Col offset={4} >\n                                <Form.Item\n                                    name=\"Category\"\n                                    label=\"Category\"\n                                    className=\"category-dropbox\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        showSearch\n                                        style={{ width: 200 }}\n                                        className=\"category-dropbox\"\n                                        placeholder=\"Select Notes Type\"\n                                        optionFilterProp=\"children\"\n                                        onChange={event => setSelectedCategory(event)}\n                                        onFocus={onFocus}\n                                        onBlur={onBlur}\n                                        // onSearch={onSearch}\n                                        filterOption={(input, option) =>\n                                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                        }\n                                    >\n                                        {getCategory.map(record => (\n                                            <Option key={record.notes_type_id} value={record.notes_type_id}>{record.notes_type}</Option>\n                                        ))}\n                                    </Select>\n                                </Form.Item>\n                            </Col>\n                        </Row>\n                        {\n                            editValue.program_id  !== 0 ? \n                            <Row>\n                            <Form.Item\n                                name=\"Language\"\n                                label=\"Language\"\n                                rules={[\n                                    {\n                                        required: false,\n                                    },\n                                ]}\n                            >\n                                <Select\n                                    showSearch\n                                    style={{ width: 223 }}\n                                    placeholder=\"Select language\"\n                                    optionFilterProp=\"children\"\n                                    onChange={event => setSelectedProgram(event)}\n                                    onFocus={onFocus}\n                                    onBlur={onBlur}\n                                    // onSearch={onSearch}\n                                    filterOption={(input, option) =>\n                                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    {getProgramType.map(record => (\n                                        <Option key={record.language_id} value={record.language_id}>{record.language_name}</Option>\n                                    ))}\n                                </Select>\n                            </Form.Item>\n                        </Row> : <div/>\n                        }\n                        <Form.Item\n                            name=\"Content\"\n                            label=\"Content\"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <TextArea rows={5} onChange={event => setSelectedContent(event.target.value)} style={{ backgroundColor: \"#222211\", color: \"#cccccc\" }} />\n                        </Form.Item>\n                    </div>\n                    <Form.Item className=\"modal-buttons\" >\n                    <Button  className=\"note-close\" onClick={handleCancel}>\n                            Close\n                        </Button>\n                        <Button type=\"primary\" className=\"note-submit\" htmlType=\"submit\" onClick={handleOk}>\n                            {editForm ? \"Update\" : \"Submit\"}\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n    );\n}\nexport default FormDetails;','04-01-2022 01:51 AM'),(7,3,5,0,'test 333','A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.\n\n\n\nA​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.A​chieve  The  Highest  Exalt, not indolence  Non peur  A  Accomplishing your best, holding things in highest regard, perseverance, andq  confidence.    The pledge class of 2015 is a dand   spades. The spade is a symbol of labor and we are working hard to achieve the  Athenian ideals.    Light and dark rooms  At interrogations, pledges are put in the light rooms because they enter thinking that  they have knowledge.','04-01-2022 01:54 AM'),(8,1,5,0,'css','.dashboard-container{\n  height: 100vh;\n}\n.site-layout-content {\n  padding: 24px;\n  background: #fff;\n}\n.ant-menu-dark {\n  justify-content: center;\n}\n.user-logo {\n  float: left;\n  margin-left: 1%;\n}\n.logo-frame:hover .logout-outer  {display: block;}\n.logout-outer {\n  display: none;\n  position: absolute;\n  top: 48px;\n  left: 56px;\n  height: 33px;\n  width: 88px;\n  background-color: #26afeb;\n  border-radius: 2px;\n  cursor: pointer;\n}\n.logout-inner {\n  color: white;\n  position: relative;\n  bottom: 17px;\n  left: 20px;\n}\n.logout-outer:hover {\n  background-color:	#8fcfec;\n  color: black;\n}\n.logout-inner:hover {\n  color: black;\n}\n.ant-layout-header {\n  padding: 0%;\n}\n.ant-menu.ant-menu-dark .ant-menu-item-selected, \n.ant-menu-submenu-popup.ant-menu-dark .ant-menu-item-selected {\n  background-color: #26afeb;\n}\n.ant-menu-dark.ant-menu-horizontal > .ant-menu-item:hover {\n  background-color: #d6d6d6;\n  color: rgba(0, 0, 0, 0.85);\n  transform: scale(1.2);\n}\n.search-container{\n  background-color: #d6d6d6;\n  padding: 5px;\n  border-radius: 10px;\n  }\n.search-bar {\n  width: 40%;\n  margin-left: 25%;\n  border-radius: 14px;\n}\n.slate-board {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: start;\n  overflow: scroll;\n  overflow-x: hidden;\n  height: 77vh;\n}\n.cards {\n  height: 18vh;\n  margin: 8px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n.cards:hover {\n  transform: scale(1.1);\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n.search-bar:hover {\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n.cards-container {\n  width: 20%;\n}\n::-webkit-scrollbar {\n  width: 15px;\n}\n::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); \n  border-radius: 10px;\n  cursor: pointer;\n  /* visibility: hidden;  -----   use it later FOR LESS CARDS */\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  background-color: #26afeb;\n}\n.footer {\n  color: rgba(255, 255, 255, 0.65);\n  text-align: center;\n  background-color: #001529;\n}\n.add-button {\n    background-color: #26afeb;\n    border-color: #26afeb;\n    margin-left: 1%;\n}\n.add-button:hover {\n  transform: scale(1.1);\n  background-color: #26afeb;\n}\n.ant-card-body {\n  padding: 5%;\n  color: #001529;\n}\n.bi-file-earmark-code, .bi-stack, .bi-github, .bi-cloud, .bi-clipboard-check, .bi-file-text {\n  font-size: 20px;\n}\n.bi-trash {\n  font-size: 14px;\n  color: #FA1754;\n}\n.card-description {\n  font-size: 10px;\n  height: 9vh;\n  margin-right: 25px;\n}\n.description-frame {\n  display: block;\n  text-overflow: ellipsis;\n  word-wrap: break-word;\n  overflow: hidden;\n  max-height: 2.6em;\n  line-height: 1.2em;\n}\n.title-frame {\n  display: block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  max-height: 1.6em;\n  width: 100%;\n}\n.delete-component {\n  position:relative; float: right; top:-33px; right: 15px;\n  cursor: pointer;\n}\n.delete-component:hover {\n  transform: scale(1.2);\n}\n.empty-list-message {\n  font-size: medium;\n  color: #001529;\n  align-self: center;\n  position: relative;\n  left: 43%;\n}\n.bi-x-circle-fill {\n  color: #FA1754;\n}\n.bi-person-circle {\n  font-size: 22px;\n  color: white;\n  cursor: pointer;\n}\n.user-name {\n  position: relative;\n  left: 6px;\n  bottom: 4px;\n  cursor: pointer;\n}\n','04-01-2022 01:56 AM'),(9,5,5,0,'rr','import React, { useState, useEffect } from \'react\';\nimport { Form, Input, Button, Card } from \'antd\';\nimport { useHistory } from \"react-router-dom\";\nimport { MailOutlined, LockOutlined, RightCircleFilled, LeftCircleFilled } from \'@ant-design/icons\';\nimport \'../Styles/login.css\';\nimport { registerLogin, getUsers } from \'../Api/login\';\nimport moment from \"moment\";\nimport { notificationContent } from \'../Shared Files/notification\';\n\nfunction Login() {\n    let history = useHistory();\n    const [registerUser, setRegisterUser] = useState();\n    const [registerPassword, setRegisterPassword] = useState();\n    const [formType, setFormType] = useState(\"User-Login\");\n    const [userList, setUserList] = useState([]);\n    const [form] = Form.useForm();\n\n    const fetchData = async () => {\n        const inComingUsers = await getUsers();\n        setUserList(inComingUsers.data);\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const onFinish = () => {\n        if (formType === \"User-Login\") {\n                const checkTheUser = userList.filter(e => e.user_name.toLowerCase() === registerUser.toLowerCase() &&\n                e.user_password.toLowerCase() === registerPassword.toLowerCase());\n                if (checkTheUser.length < 1) {\n                    return notificationContent(\"error\", \"Login\");\n                } else {\n                    const loggedinUserID = userList.filter(record => registerUser === record.user_name)[0].user_id;\n                    localStorage.setItem(\'userID\',loggedinUserID);\n                    localStorage.setItem(\'userName\',registerUser.toLowerCase());\n                    notificationContent(\"success\", \"Login\");\n                    history.push(`user${loggedinUserID}/dashboard`);\n                }\n        }\n        else if (formType === \"User-Registration\") {\n                const userExist = userList.find(record => record.user_name === registerUser) === undefined ? false : true;\n                console.log(\"laaa---\",userList )\n                if (userExist) {\n                    return notificationContent(\"warning\", \"UserExist\")\n                } else {\n                    console.log(\"2---->\")\n                    const currentDate = moment().format(\"DD-MM-YYYY hh:mm A\");\n                    const registerPayload = {\n                        username: registerUser,\n                        password: registerPassword,\n                        submission_date: currentDate\n                    };\n                    registerLogin(registerPayload).then((response) => {\n                        const status = response.data;\n                        if (status === \"success\") setFormType(\"User-Login\");\n                        fetchData();\n                        notificationContent(status, \"Registration\");\n                    });\n                }\n            form.resetFields();\n        }\n    };\n    return (\n        <div className=\"login-outline\">\n            <div className=\'login-background\'>\n                <Card size=\"small\" className=\"login-frame\"\n                    style={{ width: 400, height: 392 }}>\n                    <Form\n                        name=\"normal_login\"\n                        className=\"login-form\"\n                        onFinish={onFinish}\n                        form={form}\n                        initialValues={{\n                            remember: true,\n                        }}\n                    >\n                        <img src=\"../app-logo.png\" width=\"350\" height=\"75\"/>\n                        <div className=\"inner-box\">\n                            <span className=\"login-header\">{formType !== \"User-Login\" ? <b>Registration</b> : <b>Login</b>}</span>\n                            <div>\n                                <Form.Item\n                                    name=\"username\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \'Please enter a valid email id\',\n                                            type: \'email\',\n                                        },\n                                    ]}\n                                >\n                                    <Input className=\"email-field\" onChange={(event) => setRegisterUser(event.target.value)} size=\"large\" prefix={<MailOutlined style={{ fontSize: \'20px\' }} className=\"site-form-item-icon\" />} placeholder=\"Email\" />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"password\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \'Please enter your password\',\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        className=\"password-field\"\n                                        onChange={(event) => setRegisterPassword(event.target.value)}\n                                        size=\"large\"\n                                        prefix={<LockOutlined style={{ fontSize: \'20px\' }} className=\"site-form-item-icon\" />}\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                    />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" >\n                                        {formType !== \"User-Login\" ? \"Register\" : \"Login\"}\n                                    </Button>\n                                </Form.Item>\n                                <div>{formType === \"User-Login\" ? (<div className=\'new-user-question\' onClick={(event) => {\n                                        setFormType(\"User-Registration\");\n                                    }} >Are you a new user ? Please register here {<RightCircleFilled\n                                     style={{ color: \"#808080\", fontSize: \"16px\", cursor: \"pointer\" }} />}</div>) :\n                                    (<div className=\"register-back-button\" onClick={event => setFormType(\"User-Login\")}>\n                                        <LeftCircleFilled style={{ color: \"#808080\", fontSize: \"20px\", marginTop: \"20px\" }} />\n                                        <span style={{ color: \"#636f80\", fontSize: \"18px\" }}><span className=\"go-back\"> Go Back</span></span></div>)}\n                                </div>\n                            </div>\n                        </div>\n                    </Form>\n                </Card>\n            </div>\n        </div>\n    );\n}\nexport default Login;','04-01-2022 01:56 AM'),(10,1,6,0,'marco','rrro','04-01-2022 01:59 AM'),(11,1,7,0,'mass','sdds','04-01-2022 02:00 AM'),(12,3,6,0,'baa','ss','04-01-2022 02:00 AM'),(13,1,8,0,'maaa','maaa','04-01-2022 02:01 AM'),(14,6,6,0,'33','qwdwqd121212','04-01-2022 02:09 AM');
/*!40000 ALTER TABLE `notes` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-01-04  2:24:38
